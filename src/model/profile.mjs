import { model, Schema, Types } from "mongoose";

const profileSchema = new Schema(
  {
    // We have to write what we expect put in the collections. The data what we expect to pass.
    // The one-to-one connection thing must also be in here. (To the profile side). So the profile must has a user.
    user: {
      type: Types.ObjectId, // ObjectId means the id generated by MongoDB.
      ref: "User", // Here the reference. The name inside the "" in the model in the user.mjs in model folder must be put in here as the reference. ( const User = model("User", userSchema); ). Then the link is created. Here is the reference with the User model. We can give this reference as unique because there it cannot has two or more profiles for one user.
      required: true, // profile necessarily has a user. That is why the user is required here.
      unique: true, // There it can has only one unique userid in profile's side. It cannot be repeated in here. There it must be only one userid and there it cannot has two or more userids. Then this correctly connect one-to-one.
    }, // profile necessarily has a user. But the user may or may not has a profile.
    image: {
      required: true,
      type: String,
    },
  },
  {
    timestamps: true, // This is for createAt, updateAt
  }
); // There it passes an object inside of it.

const Profile = model("Profile", profileSchema); // First parameter is the name in string. Second parameter is the schema.

export default Profile;

// In here, we have to do this in two ways. But we can do this in one line. But in here it was done like this for our understanding. Profile connect to the User and User connect to the Profile. Both of them are joind using a reference. There is a one-to-one connection. In Profile side, there it necessarily has a User. But in User side, there it may or may not has a Profile.

// A user must be there for the profile's side. But we want to connect the user to the profile's side from one-to-one connection. Normally in one-to-one connection, in SQL database, there it connects foreign key which it is the primary key for other collection. Like user id. User id is connected to the other collection as a foreign key. That fact is happend in here.
